#include <bits/stdc++.h>
using namespace std;

/*
https://www.acmicpc.net/problem/17070
파이프 옮기기 1
DP
--- 
dp[i][j][k] 
i = 0 (가로), i=1 (세로), i=2(대각선) 
파이프의 끝점이 [j][k]위치에 i상태로 존재하는 경우의 수

가로 상태로 존재하는 것 
: 가로 상태에서 오른쪽으로 민 경우
: 대각선 상태에서 오른쪽으로 민 경우

세로 상태로 존재하는 것
: 세로 상태에서 아래로 민 경우
: 대각선 상태에서 아래로 민 경우

대각선 상태로 존재하는 것
: 가로 상태에서 오른쪽 아래로 민 것
: 세로 상태에서 오른쪽 아래로 민 것
: 대각선 상태에서 오른쪽 아래로 민 것

단 각각의 경우에 벽에 의해 막히지 않은 경우에만 이동이 가능하다. 
*/
int dp[3][16][16];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n = 0;
    cin >> n;
    dp[0][0][1] = 1;

    vector<vector<int>> v(n, vector<int>(n, 0));
    for(int i=0; i<n; ++i) {
        for(int j=0; j<n; ++j) {
            cin >> v[i][j];
        }
    }
    
    for(int i=0; i<n; ++i) {
        for(int j=0; j<n; ++j) {
            if(v[i][j] == 1) continue;
            //파이프의 끝점이 (i, j)에 위치하고, 가로 상태로 존재할 수 있는 경우 
            if(j-1>=0 && (i!=0 || j!=1)) {
                dp[0][i][j] = dp[0][i][j-1] + dp[2][i][j-1];
            }
            //파이프의 끝점이 (i, j)에 위치하고, 세로 상태로 존재할 수 있는 경우 
            if(i-1>=0){
                dp[1][i][j] = dp[1][i-1][j] + dp[2][i-1][j];
            }
            if(i-1>=0 && j-1>=0 && v[i-1][j] == 0 && v[i][j-1] == 0) {
                dp[2][i][j] = dp[0][i-1][j-1] + dp[1][i-1][j-1] + dp[2][i-1][j-1];
            }
        }
    }

    cout << dp[0][n-1][n-1]+dp[1][n-1][n-1]+dp[2][n-1][n-1];
    return 0;
}
